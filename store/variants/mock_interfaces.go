// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package variants is a generated GoMock package.
package variants

import (
	models "practice-app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	krogo "github.com/krogertechnology/krogo/pkg/krogo"
)

// MockVariantStore is a mock of VariantStore interface.
type MockVariantStore struct {
	ctrl     *gomock.Controller
	recorder *MockVariantStoreMockRecorder
}

// MockVariantStoreMockRecorder is the mock recorder for MockVariantStore.
type MockVariantStoreMockRecorder struct {
	mock *MockVariantStore
}

// NewMockVariantStore creates a new mock instance.
func NewMockVariantStore(ctrl *gomock.Controller) *MockVariantStore {
	mock := &MockVariantStore{ctrl: ctrl}
	mock.recorder = &MockVariantStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVariantStore) EXPECT() *MockVariantStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVariantStore) Create(ctx *krogo.Context, variant *models.Variant) (*models.Variant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, variant)
	ret0, _ := ret[0].(*models.Variant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVariantStoreMockRecorder) Create(ctx, variant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVariantStore)(nil).Create), ctx, variant)
}

// GetByID mocks base method.
func (m *MockVariantStore) GetByID(ctx *krogo.Context, id, vID string) (*models.Variant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id, vID)
	ret0, _ := ret[0].(*models.Variant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockVariantStoreMockRecorder) GetByID(ctx, id, vID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockVariantStore)(nil).GetByID), ctx, id, vID)
}

// GetVariantData mocks base method.
func (m *MockVariantStore) GetVariantData(ctx *krogo.Context, productID string) ([]models.VariantInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariantData", ctx, productID)
	ret0, _ := ret[0].([]models.VariantInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariantData indicates an expected call of GetVariantData.
func (mr *MockVariantStoreMockRecorder) GetVariantData(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariantData", reflect.TypeOf((*MockVariantStore)(nil).GetVariantData), ctx, productID)
}
