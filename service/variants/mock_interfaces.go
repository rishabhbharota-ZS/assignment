// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package variants is a generated GoMock package.
package variants

import (
	models "practice-app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	krogo "github.com/krogertechnology/krogo/pkg/krogo"
)

// MockVariantService is a mock of VariantService interface.
type MockVariantService struct {
	ctrl     *gomock.Controller
	recorder *MockVariantServiceMockRecorder
}

// MockVariantServiceMockRecorder is the mock recorder for MockVariantService.
type MockVariantServiceMockRecorder struct {
	mock *MockVariantService
}

// NewMockVariantService creates a new mock instance.
func NewMockVariantService(ctrl *gomock.Controller) *MockVariantService {
	mock := &MockVariantService{ctrl: ctrl}
	mock.recorder = &MockVariantServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVariantService) EXPECT() *MockVariantServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVariantService) Create(ctx *krogo.Context, product *models.Variant) (*models.Variant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, product)
	ret0, _ := ret[0].(*models.Variant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVariantServiceMockRecorder) Create(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVariantService)(nil).Create), ctx, product)
}

// GetByID mocks base method.
func (m *MockVariantService) GetByID(ctx *krogo.Context, id, pID string) (*models.Variant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id, pID)
	ret0, _ := ret[0].(*models.Variant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockVariantServiceMockRecorder) GetByID(ctx, id, pID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockVariantService)(nil).GetByID), ctx, id, pID)
}
